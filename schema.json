{
	"$schema": "https://json-schema.org/draft/2020-12/schema",
	"$id": "https://jasontank.net/basic.pfdata.schema.json",
	"title": "Pf Data 1e",
	"description": "A collection of information about a specific part of the Pathfinder system.",
	"$comment": "This schema is for the files in ./json",
	"anyOf": [
		{
			"$comment": "This is for 99% of the JSON files",
			"type": "object",
			"patternProperties": {
				"^[a-z0-9_]+$": {
					"type": "object",
					"anyOf": [
						{
							"$comment": "Basic item",
							"properties": {
								"name": { "type": "string" },
								"subtitle": { "type": "string" },
								"tags": { "type": "string" },
								"category": { "type": "string" },
								"sources": { "$ref": "#uniqueArray" },
								"description": { "$ref": "#stringArray" },
								"noFinder": { "type": "boolean" },
								"tables": { "$ref": "#tables" },
								"searchgroup": { "$ref": "#searchgroup" },
								"parent_topics": { "$ref": "#uniqueArray" },
								"siblings": { "$ref": "#uniqueArray" },
								"subtopics": { "$ref": "#uniqueArray" },
								"topLink": { "$ref": "#link" },
								"type": { "type": "string" },
								"className": { "type": "string" }
							},
							"required": [ "description", "name" ],
							"unevaluatedProperties": false
						},
						{
							"$comment": "Basic main.json item",
							"properties": {
								"title": { "type": "string" },
								"subtitle": { "type": "string" },
								"tags": { "type": "string" },
								"sources": { "$ref": "#uniqueArray" },
								"description": { "$ref": "#stringArray" },
								"searchgroup": { "$ref": "#searchgroup" },
								"noFinder": { "type": "boolean" },
								"tables": { "$ref": "#tables" },
								"className": { "type": "string" }
							},
							"required": [ "description", "title" ],
							"unevaluatedProperties": false
						},
						{
							"$comment": "Basic main.json compilation",
							"properties": {
								"title": { "type": "string" },
								"subtitle": { "type": "string" },
								"tags": { "type": "string" },
								"sources": { "$ref": "#uniqueArray" },
								"searchgroup": { "$ref": "#searchgroup" },
								"noFinder": { "type": "boolean" },
								"compileFrom": {
									"type": "object",
									"properties": {
										"source": { "$ref": "#source" },
										"targets": {
											"type": "array",
											"$comment": "Each target will be assembled by itself, then joined in order, forming a Markdown document. String arrays are kept as-is.",
											"items": {
												"anyOf": [
													{ "$ref": "#stringArray" },
													{
														"type": "object",
														"properties": {
															"limit": {
																"anyOf": [
																	{
																		"type": "string",
																		"$comment": "Only items matching this category will be included."
																	},
																	{
																		"type": "object",
																		"properties": {
																			"omit": {
																				"$ref": "#stringArray",
																				"$comment": "Items to ignore. All other items will be compiled."
																			}
																		}
																	},
																	{
																		"type": "object",
																		"properties": {
																			"only": {
																				"$ref": "#stringArray",
																				"$comment": "Only these items will be compiled."
																			}
																		}
																	}
																]
															},
															"pre": {
																"type": "string",
																"$comment": "This attaches to the beginning of the first item."
															},
															"join": {
																"type": "array",
																"$comment": "The first element attaches to the end of an item. The last element attaches to the beginning of the next item. Other items are placed in between as separate lines.",
																"items": { "type": "string" },
																"minItems": 2
															},
															"post": {
																"type": "string",
																"$comment": "This attaches to the end of the final item."
															},
															"translate": {
																"$comment": "Items are combined with newlines replaced by three at symbols (@@@), then matched against the regex, combined into the form specified by the replacement, then split into newlines on the triple-at again.",
																"type": "object",
																"properties": {
																	"regex": {
																		"type": "string",
																		"$comment": "This will be modified to catch the ENTIRE item (no need to add ^ and $ at start and end)."
																	},
																	"replacement": {
																		"type": "string",
																		"$comment": "The special phrase [[TITLE]] (with double-brackets) will be replaced by the item's name property. The special phrase [[ SUFFIX]] will be replaced by a space (or whatever you put before SUFFIX) and the item's nameSuffix property, or will be replaced by the empty string if there is no nameSuffix. The special phrase [[^S]] (with double-brackets) will be replaced with a footnote leading to the item's source. Otherwise, this is a normal regex replacement string."
																	}
																},
																"required": [ "regex", "replacement" ]
															}			
														},
														"required": [ "join", "translate", "limit" ]
													}
												]
											}
										}
									},
									"required": [ "source", "targets" ]
								}
							},
							"required": [ "compileFrom", "title" ],
							"unevaluatedProperties": false
						},
						{
							"$comment": "Basic copy",
							"properties": {
								"name": { "type": "string" },
								"copyof": { "type": "string" }
							},
							"required": [ "copyof" ],
							"unevaluatedProperties": false
						},
						{
							"$comment": "Basic alternate",
							"properties": {
								"name": { "type": "string" },
								"topLink": { "$ref": "#link" },
								"alternateOf": { "type": "string" }
							},
							"required": [ "alternateOf" ],
							"unevaluatedProperties": false
						},
						{
							"$comment": "Basic Compileable Item",
							"properties": {
								"name": { "type": "string" },
								"nameSuffix": { "type": "string" },
								"category": { "type": "string" },
								"compilationSources": {
									"type": "array",
									"items": {
										"type": "array",
										"prefixItems": [
											{ "type": "string" },
											{ "type": "number" }
										],
										"items": false
									}
								},
								"description": { "$ref": "#stringArray" },
								"addenda": { "$ref": "#stringArray" },
								"topLink": { "$ref": "#link" },
								"level": {
									"type": "number",
									"minimum": 1,
									"multipleOf": 1
								},
								"sourceEnd": { "type": "boolean" }
							},
							"required": [ "description", "name", "compilationSources" ],
							"unevaluatedProperties": false
						},
						{
							"$comment": "Basic compilation",
							"properties": {
								"name": { "type": "string" },
								"subtitle": { "type": "string" },
								"tags": { "type": "string" },
								"sources": { "$ref": "#uniqueArray" },
								"noFinder": { "type": "boolean" },
								"topLink": { "$ref": "#link" },
								"compileFrom": {
									"type": "object",
									"properties": {
										"source": { "$ref": "#source" },
										"targets": {
											"type": "array",
											"$comment": "Each target will be assembled by itself, then joined in order, forming a Markdown document. String arrays are kept as-is.",
											"items": {
												"anyOf": [
													{ "$ref": "#stringArray" },
													{
														"type": "object",
														"properties": {
															"limit": {
																"anyOf": [
																	{
																		"type": "string",
																		"$comment": "Only items matching this category will be included."
																	},
																	{
																		"type": "object",
																		"properties": {
																			"omit": {
																				"$ref": "#stringArray",
																				"$comment": "Items to ignore. All other items will be compiled."
																			}
																		}
																	},
																	{
																		"type": "object",
																		"properties": {
																			"only": {
																				"$ref": "#stringArray",
																				"$comment": "Only these items will be compiled."
																			}
																		}
																	}
																]
															},
															"pre": {
																"type": "string",
																"$comment": "This attaches to the beginning of the first item."
															},
															"join": {
																"type": "array",
																"$comment": "The first element attaches to the end of an item. The last element attaches to the beginning of the next item. Other items are placed in between as separate lines.",
																"items": { "type": "string" },
																"minItems": 2
															},
															"post": {
																"type": "string",
																"$comment": "This attaches to the end of the final item."
															},
															"translate": {
																"$comment": "Items are combined with newlines replaced by three at symbols (@@@), then matched against the regex, combined into the form specified by the replacement, then split into newlines on the triple-at again.",
																"type": "object",
																"properties": {
																	"regex": {
																		"type": "string",
																		"$comment": "This will be modified to catch the ENTIRE item (no need to add ^ and $ at start and end)."
																	},
																	"replacement": {
																		"type": "string",
																		"$comment": "The special phrase [[TITLE]] (with double-brackets) will be replaced by the item's name property. The special phrase [[ SUFFIX]] will be replaced by a space (or whatever you put before SUFFIX) and the item's nameSuffix property, or will be replaced by the empty string if there is no nameSuffix. The special phrase [[^S]] (with double-brackets) will be replaced with a footnote leading to the item's source. Otherwise, this is a normal regex replacement string."
																	}
																},
																"required": [ "regex", "replacement" ]
															}			
														},
														"required": [ "join", "translate", "limit" ]
													}
												]
											}
										}
									},
									"required": [ "source", "targets" ]
								}
							},
							"required": [ "compileFrom", "name" ],
							"unevaluatedProperties": false
						}
					]
				}
			}
		},
		{
			"$comment": "This is exclusively for feat_tree_data.json",
			"type": "array",
			"items": [
				{
					"type": "object",
					"properties": {
						"prop": "string",
						"primary": "boolean",
						"leaves": [ { "$ref": "#subfeat" } ]
					},
					"required": [ "prop" ],
					"unevaluatedProperties": false
				}
			]
		},
		{
			"$comment": "This is for colors.json",
			"type": "object",
			"properties": {
				"light": {
					"patternProperties": {
						"^[a-z]+(-(bg|text)(-dim)?)?$": {
							"type": "string",
							"pattern": "^(var *[(]--[-a-z]+[)]|#[a-f0-9A-F]{6})$"
						}
					},
					"unevaluatedProperties": false
				},
				"dark": {
					"patternProperties": {
						"^[a-z]+(-(bg|text)(-dim)?)?$": {
							"type": "string",
							"pattern": "^(var *[(]--[-a-z]+[)]|#[a-f0-9A-F]{6})$"
						}
					},
					"unevaluatedProperties": false
				},
				"required": [ "light", "dark" ]
			},
			"unevaluatedProperties": false
		}
	],
	"$defs": {
		"stringArray": {
			"$anchor": "stringArray",
			"type": "array",
			"items": { "type": "string" }
		},
		"searchgroup": {
			"$anchor": "searchgroup",
			"enum": [
				"spell", "race", "class", "magic", "rule",
				"monster", "feat", "trait", "equip", "magic",
				"tech", "faith"
			]
		},
		"source": {
			"$anchor": "source",
			"enum": [
				"talent",
				"ninjatrick",
				"trick",
				"slayertalent",
				"socialtalent", "vigilantetalent",
				"investigatortalent",
				"hex",
				"shamanhex",
				"discovery",
				"arcanediscovery",
				"phrenicamp",
				"trait",
				"deed",
				"swashdeed",
				"hkdiscipline",
				"kipower",
				"stylestrike",
				"evolution",
				"unchainedevolution",
				"eidolon",
				"patron",
				"rangertrap",
				"stare",
				"mercy"
			]
		},
		"uniqueArray": {
			"$anchor": "uniqueArray",
			"type": "array",
			"items": { "type": "string" },
			"uniqueItems": true
		},
		"link": {
			"$anchor": "link",
			"type": "array",
			"prefixItems": [
				{ "type": "string" },
				{
					"type": "string",
					"pattern": "^[-a-z]+/[a-z_0-9]+$"
				}
			],
			"minItems": 2,
			"maxItems": 2,
			"items": false
		},
		"tables": {
			"$anchor": "tables",
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"id": { "type": "string" },
					"headers": { "$ref": "#stringArray" },
					"types": {
						"type": "array",
						"items": { "enum": [ "gp", "lbs", "gp+", "lbs+", "bonus", "num", "pct", null, 0 ] }
					},
					"alignments": {
						"$comment": "true = start-aligned, false = end-aligned, null = center-aligned",
						"type": "array",
						"items": { "enum": [ true, false, null ] }
					},
					"initialColumn": {
						"type": "integer",
						"minimum": 0
					},
					"nullValue": { "type": "string" },
					"ripples": {
						"type": "array",
						"items": {
							"type": "integer",
							"minimum": 0
						}
					},
					"sortable": { "type": "boolean" },
					"filter": {
						"type":"array",
						"items": {
							"type": "object",
							"anyOf": [
								{
									"properties": {
										"col": { "type": "number" },
										"range": {
											"type": "array",
											"prefixItems": [
												{ "type": "number" },
												{ "type": "number" }
											],
											"items": false
										},
										"labels": { "$ref": "#uniqueArray" }
									},
									"requires": [ "range", "col" ],
									"unevaluatedProperties": false
								},
								{
									"properties": {
										"col": { "type": "number" },
										"equals": {
											"type": "array",
											"items": { "type": ["string","number"] },
											"uniqueItems": true
										},
										"labels": { "$ref": "#uniqueArray" }
									},
									"requires": [ "equals", "col" ],
									"unevaluatedProperties": false
								},
								{
									"properties": {
										"col": { "type": "number" },
										"has": { "$ref": "#uniqueArray" },
										"word": { "type": "boolean" },
										"labels": { "$ref": "#uniqueArray" }
									},
									"requires": [ "has", "col" ],
									"unevaluatedProperties": false
								}
							]
						}
					},
					"sizes": {
						"type": "array",
						"items": {
							"type": "number",
							"exclusiveMinimum": 0
						}
					},
					"data": {
						"$comment": "null | string | number | [ number, string ] | [ string, string ]",
						"type": "array",
						"items": {
							"type": "array",
							"items": {
								"anyOf": [
									{ "enum": [null] },
									{ "type": "number" },
									{ "type": "string" },
									{
										"type": "array",
										"prefixItems": [
											{ "type": ["string", "number"] },
											{ "type": "string" }
										],
										"minItems": 2,
										"maxItems": 2,
										"items": false
									}
								]
							}
						}
					},
					"requires": [ "id", "headers", "types", "data", "initialColumn" ]
				},
				"unevaluatedProperties": false
			}
		},
		"subfeat": {
			"$anchor": "subfeat",
			"type": "object",
			"anyOf": [
				{
					"properties": {
						"prop": "string",
						"primary": "boolean",
						"coparents": { "$ref": "#uniqueArray" },
						"leaves": [ { "$ref": "#subfeat" } ]
					},
					"required": [ "prop" ],
					"unevaluatedProperties": false
				},
				{
					"properties": {
						"prop": "string",
						"primary": "boolean",
						"coparentsNoLink": { "$ref": "#uniqueArray" },
						"leaves": [ { "$ref": "#subfeat" } ]
					},
					"required": [ "prop" ],
					"unevaluatedProperties": false
				}
			]
		}
	}
}
